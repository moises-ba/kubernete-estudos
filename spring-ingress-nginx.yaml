#instalar o loadbalance MetalLB, nao precisa se for implantar numa cloud, seguindo os passos: https://metallb.universe.tf/installation/
#kubectl edit configmap -n kube-system kube-proxy e setar o strictARP para true
#apiVersion: kubeproxy.config.k8s.io/v1alpha1
#kind: KubeProxyConfiguration
#mode: "ipvs"
#ipvs:
#  strictARP: true  <------- SETAR PARA TRUE
#kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/namespace.yaml
#kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/metallb.yaml
#kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"

apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:      
      - 192.168.99.110-192.168.99.120

---      
#aplicar o plugin(ingress-nginx) caso nao exista 
#kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-0.31.1/deploy/static/provider/cloud/deploy.yaml

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-springboot
  annotations:
    # use the shared ingress-nginx
    #kubernetes.io/ingress.class: "nginx"
    #kubernetes.io/ingress.name: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
  #- host: springboot.org
   - http:
      paths:
      - path: /ms-product/(.+)
        backend:
          serviceName: ms-product
          servicePort: 80
      - path: /hello-service/(.+)
        backend:
          serviceName: spring-boot-configmaps-demo
          servicePort: 80
